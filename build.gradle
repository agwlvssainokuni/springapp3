buildscript {
	ext {

		// リリース物件ビルド構成。
		getProjectProperty = {n, v -> rootProject.hasProperty(n) ? rootProject.getProperty(n) : v }
		propInstid = getProjectProperty("instid", "00")
		propEnvname = getProjectProperty("envname", "prod")
		propTopdir = getProjectProperty("topdir", "/opt/${rootProject.name}")
		propInstdir = getProjectProperty("instdir", "${propTopdir}/${propInstid}")
		propWebdir = getProjectProperty("webdir", "${propInstdir}/web")
		propWebconfdir = getProjectProperty("webconfdir", "${propWebdir}/conf")
		propWeblogdir = getProjectProperty("weblogdir", "${propWebdir}/log")
		propBatchdir = getProjectProperty("batchdir", "${propInstdir}/batch")
		propBatchconfdir = getProjectProperty("batchconfdir", "${propBatchdir}/conf")
		propBatchlogdir = getProjectProperty("batchlogdir", "${propBatchdir}/log")

		// 依存ライブラリのバージョン。
		versionJavaxEl = "3.0.0"
		versionJavaxServlet = "4.0.1"
		versionJavaxValidation = "2.0.1.Final"
		versionCommonsLang3 = "3.9"
		versionCommonsCollections4 = "4.3"
		versionCommonsCodec = "1.12"
		versionCommonsCsv = "1.7"
		versionGuava = "28.0-jre"
		versionHibernateValidator = "6.0.17.Final"
		versionFreemarker = "2.3.28"
		versionSpringBoot = "2.2.2.RELEASE"
		versionSlf4j = "1.7.26"
		versionLogback = "1.2.3"
		versionJanino = "3.0.14"
		versionFluentLogger = "0.3.4"
		versionJunit = "4.12"
		versionHamcrest = "1.3"
		versionMockito = "2.28.2"
		versionH2 = "1.4.199"
		versionGreenMail = "1.5.11"
	}
	repositories { mavenCentral() }
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${versionSpringBoot}"
	}
}

plugins {
	id "java-library"
	id "eclipse"
}

subprojects {
	apply plugin: "java-library"
	apply plugin: "eclipse"
	apply plugin: "io.spring.dependency-management"

	if (project.name.startsWith("fundamental-")) {
		dependencyManagement {
			imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${versionSpringBoot}") }
		}
	}

	if (project.name.startsWith("gallery-")) {
		apply plugin: "org.springframework.boot"
		springBoot { mainClassName = "cherry.gallery.Main" }
	}

	sourceSets {
		delivery
	}

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	compileJava.options.encoding = "UTF-8"
	compileTestJava.options.encoding = "UTF-8"
	compileDeliveryJava.options.encoding = "UTF-8"

	processDeliveryResources {

		def props = new Properties()
		["tokens/basis.properties", "tokens/${propEnvname}.properties", "tokens/${propEnvname}_${propInstid}.properties"].each {
			def file = rootProject.file(it)
			if (file.exists()) {
				file.withInputStream { props.load(it) }
			}
		}

		props.setProperty("tokens.instid", propInstid)
		props.setProperty("tokens.envname", propEnvname)

		props.setProperty("tokens.topdir", propTopdir)
		props.setProperty("tokens.instdir", propInstdir)
		props.setProperty("tokens.webdir", propWebdir)
		props.setProperty("tokens.webconfdir", propWebconfdir)
		props.setProperty("tokens.weblogdir", propWeblogdir)
		props.setProperty("tokens.batchdir", propBatchdir)
		props.setProperty("tokens.batchconfdir", propBatchconfdir)
		props.setProperty("tokens.batchlogdir", propBatchlogdir)

		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
		rename("\\.template\$", "")
	}

	processResources {
		if (project.name == "buildinfo") {
			def props = new Properties()
			["BUILD_NUMBER", "BUILD_ID", "BUILD_TIMESTAMP", "JOB_NAME", "BUILD_TAG", "GIT_COMMIT", "GIT_BRANCH"].each {
				props.setProperty(it, System.getenv(it) == null ? "N/A" : System.getenv(it))
			}
			filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
		}
	}

	repositories { mavenCentral() }
	dependencies {
		// elemental
		if (project.name == "elemental-chartype") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
		}
		if (project.name == "elemental-code") {
			// なし。
		}
		if (project.name == "elemental-collection") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.apache.commons:commons-collections4:${versionCommonsCollections4}"
		}
		if (project.name == "elemental-command") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
		}
		if (project.name == "elemental-crypto") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			testImplementation "commons-codec:commons-codec:${versionCommonsCodec}"
		}
		if (project.name == "elemental-encdec") {
			testImplementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
		}
		if (project.name == "elemental-log") {
			implementation "org.slf4j:slf4j-api:${versionSlf4j}"
		}
		if (project.name == "elemental-logback") {
			implementation "ch.qos.logback:logback-classic:${versionLogback}"
			testImplementation "org.slf4j:slf4j-api:${versionSlf4j}"
			testRuntimeOnly "org.codehaus.janino:janino:${versionJanino}"
		}
		if (project.name == "elemental-loop") {
			implementation "com.google.guava:guava:${versionGuava}"
			testImplementation "org.slf4j:slf4j-api:${versionSlf4j}"
			testRuntimeOnly "ch.qos.logback:logback-classic:${versionLogback}"
		}
		if (project.name == "elemental-paginate") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
		}
		if (project.name == "elemental-util") {
			// なし。
		}
		if (project.name == "elemental-wakachi") {
			// なし。
		}
		if (project.name == "elemental-fluent") {
			implementation "org.fluentd:fluent-logger:${versionFluentLogger}"
			implementation "ch.qos.logback:logback-classic:${versionLogback}"
		}

		// fundamental
		if (project.name == "fundamental-autoconfigure") {
			compileOnly project(":corelib:elemental-crypto")
			compileOnly project(":corelib:fundamental-appinfo")
			compileOnly project(":corelib:fundamental-bizcal")
			compileOnly project(":corelib:fundamental-buildinfo")
			compileOnly project(":corelib:fundamental-crypto")
			compileOnly project(":corelib:fundamental-formatter")
			compileOnly project(":corelib:fundamental-mail")
			compileOnly project(":corelib:fundamental-numbering")
			compileOnly project(":corelib:fundamental-servlet")
			compileOnly project(":corelib:fundamental-validator")
			testImplementation project(":corelib:elemental-chartype")
			testImplementation project(":corelib:elemental-crypto")
			testImplementation project(":corelib:fundamental-appinfo")
			testImplementation project(":corelib:fundamental-bizcal")
			testImplementation project(":corelib:fundamental-buildinfo")
			testImplementation project(":corelib:fundamental-crypto")
			testImplementation project(":corelib:fundamental-formatter")
			testImplementation project(":corelib:fundamental-mail")
			testImplementation project(":corelib:fundamental-numbering")
			testImplementation project(":corelib:fundamental-servlet")
			testImplementation project(":corelib:fundamental-validator")
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.apache.commons:commons-collections4:${versionCommonsCollections4}"
			testImplementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			testImplementation "com.google.guava:guava:${versionGuava}"
			testImplementation "javax.servlet:javax.servlet-api:${versionJavaxServlet}"
			compileOnly "org.springframework.boot:spring-boot-starter-jdbc"
			testImplementation "org.springframework.boot:spring-boot-starter-jdbc"
			compileOnly "org.springframework.boot:spring-boot-starter-mail"
			testImplementation "org.springframework.boot:spring-boot-starter-mail"
			testRuntimeOnly "com.h2database:h2:${versionH2}"
			testImplementation "com.icegreen:greenmail:${versionGreenMail}"
			compileOnly "org.springframework.boot:spring-boot-configuration-processor"
		}
		if (project.name == "fundamental-appinfo") {
			implementation "org.springframework.boot:spring-boot-starter"
		}
		if (project.name == "fundamental-batch") {
			implementation "org.springframework.boot:spring-boot-starter"
		}
		if (project.name == "fundamental-bizcal") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.yaml:snakeyaml"
			implementation "org.springframework.boot:spring-boot-starter"
		}
		if (project.name == "fundamental-buildinfo") {
			implementation "org.springframework.boot:spring-boot-starter"
		}
		if (project.name == "fundamental-crypto") {
			implementation project(":corelib:elemental-crypto")
			implementation "org.apache.commons:commons-collections4:${versionCommonsCollections4}"
			implementation "org.springframework.boot:spring-boot-starter"
			testImplementation project(":corelib:elemental-crypto")
		}
		if (project.name == "fundamental-formatter") {
			implementation "org.springframework.boot:spring-boot-starter"
		}
		if (project.name == "fundamental-mail") {
			implementation project(":corelib:elemental-loop")
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.freemarker:freemarker:${versionFreemarker}"
			implementation "org.yaml:snakeyaml"
			implementation "org.springframework.boot:spring-boot-starter-jdbc"
			implementation "org.springframework.boot:spring-boot-starter-mail"
		}
		if (project.name == "fundamental-numbering") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.apache.commons:commons-collections4:${versionCommonsCollections4}"
			implementation "org.springframework.boot:spring-boot-starter-jdbc"
			testImplementation "com.h2database:h2:${versionH2}"
		}
		if (project.name == "fundamental-servlet") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.slf4j:slf4j-api:${versionSlf4j}"
			implementation "org.springframework.boot:spring-boot-starter"
			compileOnly "javax.servlet:javax.servlet-api:${versionJavaxServlet}"
			testImplementation "javax.servlet:javax.servlet-api:${versionJavaxServlet}"
		}
		if (project.name == "fundamental-spring") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.slf4j:slf4j-api:${versionSlf4j}"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-web"
			implementation "org.springframework.boot:spring-boot-starter-security"
		}
		if (project.name == "fundamental-testtool") {
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.apache.commons:commons-collections4:${versionCommonsCollections4}"
			implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-json"
			// runtimeOnly "org.springframework.boot:spring-boot-starter-aop"
			// runtimeOnly "org.springframework.boot:spring-boot-starter-web"
			// runtimeOnly "org.springframework.boot:spring-boot-starter-thymeleaf"
			testImplementation "org.springframework.boot:spring-boot-starter-json"
		}
		if (project.name == "fundamental-validator") {
			implementation project(":corelib:elemental-chartype")
			runtimeOnly "javax.el:javax.el-api:${versionJavaxEl}"
			implementation "javax.validation:validation-api:${versionJavaxValidation}"
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			runtimeOnly "org.glassfish:javax.el:${versionJavaxEl}"
			runtimeOnly "org.hibernate.validator:hibernate-validator:${versionHibernateValidator}"
			implementation "org.springframework.boot:spring-boot-starter"
		}

		// galleryapp
		if (project.name == "gallery-blank-web") {
			runtimeOnly project(":corelib:fundamental-spring")
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-web"
			implementation "org.springframework.boot:spring-boot-starter-security"
			runtimeOnly "org.springframework.boot:spring-boot-starter-aop"
			runtimeOnly "org.springframework.boot:spring-boot-starter-json"
			runtimeOnly "org.springframework.boot:spring-boot-starter-validation"
			runtimeOnly "org.springframework.boot:spring-boot-starter-thymeleaf"
		}
		if (project.name == "gallery-login-inmem-web") {
			runtimeOnly project(":corelib:fundamental-spring")
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-web"
			implementation "org.springframework.boot:spring-boot-starter-security"
			runtimeOnly "org.springframework.boot:spring-boot-starter-aop"
			runtimeOnly "org.springframework.boot:spring-boot-starter-json"
			runtimeOnly "org.springframework.boot:spring-boot-starter-validation"
			runtimeOnly "org.springframework.boot:spring-boot-starter-thymeleaf"
		}
		if (project.name == "gallery-login-jdbc-web") {
			runtimeOnly project(":corelib:fundamental-spring")
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-web"
			implementation "org.springframework.boot:spring-boot-starter-security"
			runtimeOnly "org.springframework.boot:spring-boot-starter-aop"
			runtimeOnly "org.springframework.boot:spring-boot-starter-json"
			runtimeOnly "org.springframework.boot:spring-boot-starter-validation"
			runtimeOnly "org.springframework.boot:spring-boot-starter-thymeleaf"
			runtimeOnly "org.springframework.boot:spring-boot-starter-jdbc"
			runtimeOnly "org.flywaydb:flyway-core"
			runtimeOnly "com.h2database:h2:${versionH2}"
		}
		if (project.name == "gallery-ex01-web") {
			runtimeOnly project(":corelib:fundamental-autoconfigure")
			implementation project(":corelib:fundamental-servlet")
			runtimeOnly project(":corelib:fundamental-spring")
			implementation "org.apache.commons:commons-lang3:${versionCommonsLang3}"
			implementation "org.apache.commons:commons-csv:${versionCommonsCsv}"
			implementation "org.springframework.boot:spring-boot-starter"
			implementation "org.springframework.boot:spring-boot-starter-web"
			implementation "org.springframework.boot:spring-boot-starter-security"
			runtimeOnly "org.springframework.boot:spring-boot-starter-aop"
			runtimeOnly "org.springframework.boot:spring-boot-starter-json"
			runtimeOnly "org.springframework.boot:spring-boot-starter-validation"
			runtimeOnly "org.springframework.boot:spring-boot-starter-thymeleaf"
			implementation "org.springframework.boot:spring-boot-starter-jdbc"
			runtimeOnly "org.flywaydb:flyway-core"
			runtimeOnly "com.h2database:h2:${versionH2}"
		}

		// テストライブラリ。
		testImplementation "junit:junit:${versionJunit}"
		testImplementation "org.hamcrest:hamcrest-all:${versionHamcrest}"
		testImplementation "org.mockito:mockito-core:${versionMockito}"
		if (project.name.startsWith("fundamental-")) {
			testImplementation "org.springframework.boot:spring-boot-starter-test"
			testRuntimeOnly "org.springframework.boot:spring-boot-starter-aop"
		}
	}
}
